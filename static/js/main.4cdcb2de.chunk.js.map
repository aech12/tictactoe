{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","_ref","onClick","value","react_default","a","createElement","className","Board","_this","this","board","props","squares","map","i","components_Square","key","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","step","state","stepCount","history","slice","xIsNext","setState","concat","console","log","jumpTo","Array","fill","status","_this2","winner","moves","d","msg","components_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cdcb2de.chunk.js","sourcesContent":["import React from 'react'\r\nimport './All.css'\r\n\r\nconst Square = ({onClick, value}) => {\r\n  return (\r\n    <div className='square' onClick={onClick}>\r\n      {value}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Square\r\n\r\n","import React, {Component} from 'react';\r\nimport './All.css'\r\nimport Square from './Square'\r\n\r\n// const Board = ({squares, onClick}) => {\r\nclass Board extends Component {\r\n  render() {\r\n    const board = this.props.squares.map((value, i)=>\r\n      <Square\r\n        value={value} \r\n        key={i}\r\n        onClick={()=> this.props.onClick(i)}\r\n      />\r\n    )\r\n  return (\r\n    <div>\r\n      {board}\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\nimport './components/All.css';\nimport Board from './components/Board';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {squares: Array(9).fill(null)}\n      ],\n      xIsNext: true,\n      stepCount: 0\n    }\n  }\n\n  handleClick = (i) => {\n    // const history = this.state.history;\n    // ^ this leads to a bug when clicking back on history ^\n    const step = this.state.stepCount;\n    const history = this.state.history.slice(0, step+1);\n    const squares = history[history.length-1].squares.slice();\n    if (calculateWinner(squares)||squares[i]) {return;}\n\n    if (this.state.xIsNext) {squares[i]='X'}\n    else {squares[i]='O'}\n    this.setState({\n      history: history.concat([{squares}]),\n      xIsNext: !this.state.xIsNext,\n      stepCount: history.length\n    })\n    console.log(this.state.history)\n  }\n  jumpTo=(i)=> {\n    this.setState({\n      stepCount: i,\n      xIsNext: (i % 2) === 0,\n    })\n  }\n\n  render() {\n    const history = this.state.history;\n    const squares = history[history.length-1].squares.slice();\n    let status;\n    \n    const winner = calculateWinner(squares)\n    if (winner) {\n      status = `Winner is ${winner}`\n    } else {\n      status = `Next player is: ${this.state.xIsNext?'X':'O'}`\n    }\n    const moves = \n    history.map((d, i)=> {\n      let msg = i?`Go to move: #${i}`:`Go to game start`\n      return (\n        <li key={i}>\n          <button onClick={()=> this.jumpTo(i)}>\n            {`${msg}`}\n          </button>\n        </li>\n      )\n    })\n\n    return (\n      <div className='game'>\n        <div className='leftside'>\n          <div className='status'>{status}</div>\n          <div className='board'>\n            <Board\n              squares={history[this.state.stepCount].squares}\n              onClick={this.handleClick}\n            />\n          </div>\n        </div>\n        <ul>{moves}</ul>\n      </div>\n    )\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}